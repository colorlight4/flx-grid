//flx-grid.scss


//default values
$flxclm: 			12 		!default; //flx-grid-units
$flxmx: 			10px 	!default; //flx-margin(-x if y is defined)
$flxmy:				$flxmx	!default; //flx-margin-y

$flxst-mode: 		grid 	!default; //modes "grid" and "free"
$flxst-direction: 	row 	!default; //directions "row", "row-reverse", "column" and "column-reverse"

//functions
@function grd-calc($flxwth, $flxfcclm: $flxclm, $flxfcmd: $flxmx) { // "grid" mode math
	@return calc(#{(($flxwth /$flxfcclm) * 100%)} - #{((($flxfcclm - $flxwth) / $flxfcclm ) * $flxfcmd)});
}

@function grd-calc-free($flxwth, $flxfcclm: $flxclm, $flxfcmd: $flxmx) { // "free" mode math
	@return calc(#{(($flxwth /$flxfcclm) * 100%)} - #{$flxfcmd});
}

//settings
@mixin flx-settings($flxst-mode: $flxst-mode, $flxst-direction: $flxst-direction) {
	$flxst-mode: $flxst-mode !global;
	$flxst-direction: $flxst-direction !global;
}

//container
@mixin flx-container($flxcntclm: $flxclm, $flxcntmx: $flxmx, $flxcntmy: $flxmy) {
	display: flex;
	flex-wrap: wrap;
	box-sizing: border-box;
	flex-direction: $flxst-direction;
	direction: ltr;

 	@if $flxmy == $flxcntmy {
		$flxcntmy: $flxcntmx;
	}

	$flxtmclm: 	$flxcntclm 	!global;
	$flxtmmx: 	$flxcntmx	!global;
	$flxtmmy: 	$flxcntmy	!global;
}

//box
@mixin flx-item($flxwth, $flxtmclm: $flxtmclm, $flxtmmx: $flxtmmx, $flxtmmy: $flxtmmy) {

	@if $flxwth == 0 {
		margin: 0;
		display: none;
	}

	@if $flxst-direction == "row" or $flxst-direction == "row-reverse" {
		$flxtmmd: $flxtmmx !global;
	} @else if unit($flxtmmy) == "%" {
		@error "Percentage grid margin is invalid in column mode"
	} @else {
		$flxtmmd: $flxtmmy !global;
	}

	@if $flxtmmd == 0 {
		$flxtmmd: 0px;
	}

	@if type-of($flxwth) == number {
		@if $flxst-mode == "free" {
			@if unitless($flxwth) { // free-mode
				flex-basis: grd-calc-free($flxwth, $flxtmclm, $flxtmmd);
			} @else { // hard-item
				flex-basis: $flxwth;
			}
		} @else if $flxst-mode == "grid" { // grid-mode
			flex-basis: grd-calc($flxwth, $flxtmclm, $flxtmmd);
		} @else {
			@error "flx-mode not defined";
		}
	} @else if $flxwth == 'flex' { // flex-item
		flex: 1;
	} @else {
		@error "flxwth not defined";
	}

	@if $flxst-direction == "row" {
		margin: 0 $flxtmmd $flxtmmy 0;
		$flxlstd: right !global;
	} @else if $flxst-direction == "row-reverse"{
		margin: 0 0 $flxtmmy $flxtmmd;
		$flxlstd: left !global;
	} @else if $flxst-direction == "column"{
		margin: 0 $flxtmmx $flxtmmd 0;
		$flxlstd: bottom !global;
	} @else if $flxst-direction == "column-reverse"{
		margin: $flxtmmd 0 0 $flxtmmx;
		$flxlstd: top !global;
	}

	@if $flxst-mode == "grid" {
		&:last-child {
			margin-#{$flxlstd}: 0;
		}
	}
}

//last item
@mixin flx-last($flxlst: null) {
	@if $flxst-mode == "grid" {
		@if $flxlst == null {
			margin-#{$flxlstd}: 0;
		} @else {
			&:nth-child(#{$flxlst}) {
				margin-#{$flxlstd}: 0;
			}
		}
	} @else {
		@error "flx-last requires grid-mode";
	}
}

//shift - draft
// @mixin flx-shift($flxshf, $flxshffll: false) {

// 	@if $flxst-direction == "row" {
// 		$flxshfd: left;
// 	} @else if $flxst-direction == "row-reverse"{
// 		$flxshfd: right;
// 	} @else if $flxst-direction == "column"{
// 		$flxshfd: top;
// 	} @else if $flxst-direction == "column-reverse"{
// 		$flxshfd: bottom;
// 	}

// 	$flxshfclc: (($flxshf /$flxtmclm) * 100%);

// 	@if $flxst-mode == "free" {
// 		margin-#{$flxshfd}: $flxshfclc;
// 	} @else if $flxst-mode == "last" {
// 		$flxshfspc: ((($flxtmclm - $flxshf) / $flxtmclm ) * $flxtmmx - $flxtmmd);
// 		@include calc(margin-#{$flxshfd}, "#{$flxshfclc} - #{$flxshfspc}");
// 		margin-#{$flxshfd}: grd-calc()
// 	}

// 	@if $flxshffll == true {
// 		@if $flxshf == "center" {
// 		} @else {
// 			margin-#{$flxlstd}: auto;
// 		}
// 	}
// }