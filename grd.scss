// grd v2.0.0wd
//
// 2015-2017 by Felix Kalkuhl


// 
// 1. variables

// 1.1 lists
// 1.1.1 value options
$grd-modes:         grid, experimental;
$grd-directions:    row, row-reverse, column, column-reverse; // similar to "flex-direction"

$grd-margin-side:   right, left, bottom, top;
$grd-margin-b-side: bottom, bottom, right, left;

// 1.1.2 helper lists
$grd-container-helper: ();
$grd-item-helper-a: ();
$grd-item-helper-b: ();


// 1.2 default values
$grd-units:         12                      !default; // quantity of grid units
$grd-margin:        10px                    !default; // primary gutter (perpendicular to flex direction)
$grd-margin-b:      $grd-margin             !default; // secondary gutter (prallel to flex direction) - if undefined equal to $grd-margin

$grd-mode:          nth($grd-modes, 1)      !default; // default "grid"
$grd-direction:     nth($grd-directions, 1) !default; // default "row"

//
// 2. functions

// 2.1 "grid" mode
@function grd-calc($grd-width, $grd-units: $grd-units, $grd-margin: $grd-margin){
  @return calc(#{(($grd-width / $grd-units) * 100%)} - #{((($grd-units - $grd-width) / $grd-units) * $grd-margin)});
}

// 2.2 "experimental" mode
@function grd-calc-experimental($grd-width, $grd-units: $grd-units, $grd-margin: $grd-margin){
  @return calc(#{(($grd-width / $grd-units) * 100%)} - #{$grd-margin});
}

//
// 3. mixins

// 3.1 container
@mixin grd-container($grd-var: null) {
  @if $grd-var {
    @each $var in $grd-var {
      @if type-of($var) == number {
        @if unitless($var) {
          $grd-units: $var !global;
        } @else {
          $grd-container-helper: append($grd-container-helper, $var, 'comma') !global;
        }
      }
      @each $direction in $grd-directions {
        @if $var == $direction {
          $grd-direction: $var !global;
        }
      }
      @each $mode in $grd-modes {
        @if $var == $mode {
          $grd-mode: $var !global;
        }
      }
    }
    @if length($grd-container-helper) >= 1 {
      $grd-margin: nth($grd-container-helper, 1) !global;
      @if length($grd-container-helper) >= 2 {
        $grd-margin-b: nth($grd-container-helper, 2) !global;
      }
    }
  }
  box-sizing: border-box;
  direction: ltr;
  display: flex;
  flex-direction: $grd-direction;
  flex-wrap: wrap;
}


// 3.2 item
@mixin grd-item($grd-var: null) {
  @if $grd-var {

    $first: true;
    @each $var in $grd-var {

      @if $grd-mode == nth($grd-modes, 2) and $first {
        $grd-item-helper-a: append($grd-item-helper-a, $var, 'comma') !global;
        $first: false;
      } @else if type-of($var) == number {
        @if unitless($var) {
          $grd-item-helper-a: append($grd-item-helper-a, $var, 'comma') !global;
        } @else {
          $grd-item-helper-b: append($grd-item-helper-b, $var, 'comma') !global;
        }
      }
    }

    @if length($grd-item-helper-a) >= 2 {
      $grd-units: nth($grd-item-helper-a, 2) !global;
    }
    @if length($grd-item-helper-b) >= 1 {
      $grd-margin: nth($grd-item-helper-b, 1) !global;
      @if length($grd-item-helper-b) >= 2 {
          $grd-margin-b: nth($grd-item-helper-b, 2) !global;
      }
    }

    @if nth($grd-item-helper-a, 1) == 0 {
      display: none;
      margin: 0;
    } @else {
      @if $grd-mode == nth($grd-modes, 1) {
        flex-basis: grd-calc(nth($grd-item-helper-a, 1), $grd-units, $grd-margin);
      } @else if $grd-mode == nth($grd-modes, 2) {
        @if nth($grd-item-helper-a, 1) == "flex" {
          flex: 1;
        } @else if unitless(nth($grd-item-helper-a, 1)){
          flex-basis: grd-calc-experimental(nth($grd-item-helper-a, 1), $grd-units, $grd-margin);
        } @else {
          flex-basis: nth($grd-item-helper-a, 1);
        }
      }
    }

    @for $i from 1 through length($grd-directions) {
      @if $grd-direction == nth($grd-directions, $i) {
        margin: 0;
        margin-#{nth($grd-margin-side, $i)}: $grd-margin;
        margin-#{nth($grd-margin-b-side, $i)}: $grd-margin-b;

        @if $grd-mode == nth($grd-modes, 1) {
          &:last-child {
            margin-#{nth($grd-margin-side, $i)}: 0;
          }
        }
        @if $grd-direction == nth($grd-directions, 3) and unit($grd-margin) == "%" or $grd-direction == nth($grd-directions, 4) and unit($grd-margin) == "%" {
          @warn "grd-grid warn/ percentage margin combined with '#{nth($grd-directions, 3)}' or '#{nth($grd-directions, 4)}' brokes grid";
        }
      }
    }
  } @else {
    @error "grd-grid error/ grd-item width undefined";
  }
}

// 3.3 last
@mixin grd-last($grd-var: null) {
  @if $grd-mode == "grid" {
    @for $i from 1 through length($grd-directions) {
      @if $grd-direction == nth($grd-directions, $i) {
       $grd-last: nth($grd-margin-side, $i) !global;
      }
    }
    @if $grd-var {
      &:nth-child(#{$grd-var}) {
        margin-#{$grd-last}: 0;
      }
    } @else {
      margin-#{$grd-last}: 0;
    }
  } @else {
    @warn "grd-grid warn/ grd-last only nessesary in gird mode";
  }
}